using System;

namespace FinalNoise
{
    /// <summary>
    /// Генерация белого шума Гаусса
    /// </summary>
    static class WhiteNoiseGaus
    {
        /// <summary>
        /// Измненеие пикселя
        /// </summary>
        /// <param name="pixel">Целевой пикель</param>
        /// <param name="renderParam">Параметр шума</param>
        /// <returns>Измененный пиксель</returns>
        static public Pixel Effect(Pixel pixel, float renderParam = 50)
        {
            double noise = GaussMethod(renderParam); // получения значения по нормальному распределению
            pixel.SetColor(pixel.Color.R + noise, pixel.Color.G + noise, pixel.Color.B + noise);
            return pixel;
        }

        /*
         * Описание алгоритма.
         * Генерация случайного числа по нормальному распределению (Гаусса)
         * Метод полярных координат.
         * Прямое преобразование псевдослучайного числа y, принадлежащего 
         * равномерно распределенной случайной величине Y на интервале [0, 1]
         * в число x, принадлежащее с.в. X с нормальным законом распределения.
         * 
         * Алгоритм:
         * 
         * Шаг 1. Выбрать 2 независимых случайных числа y1 и y2, равномерно распределенных в интервале [0, 1]
         * 
         * Шаг 2. Установить значения
         * v1 = 2 * y1 - 1;
         * v2 = 2 * y2 - 1;
         * v1 и v2 равномерно распределены в интервале [-1, 1]
         * 
         * Шаг 3. Установить 
         * s = v1^2 + v2^2;
         * 
         * Шаг 4. Проверить условие:
         * if(s >= 1) than переходим к шагу 1 else перехолим к шагу 5.
         * 
         * Шаг 5. Вычислить:
         * x1 = v1 * sqrt((-2* * ln(s))/s)
         * x2 = v2 * sqrt((-2* * ln(s))/s)
         * Полученные величины x1 и x2 - значения нормально распределенной с.в. с мат.ожиданием m = 0
         * и среднеквадратическим отклонением sigma = 1
         * 
         * Шаг 6. Для получения значений с другими параметрами (m != 0, sigma != 1)
         * вычисляем:
         * xi = m + xi * sigma;
         */

        static readonly Random rnd = new Random();

        /// <summary>
        /// Реализация метода полярных координат
        /// </summary>
        /// <param name="sigma">Среднеквадратическое отклонение</param>
        /// <returns>Значение с нормальным распределением по заданным параметрам</returns>
        static private double GaussMethod(double sigma = 1)
        {
            double s;
            double v1;
            do
            {
                //Шаг 1, 2.
                v1 = 2 * rnd.NextDouble() - 1; // , где rnd.NextDouble() соответствуют вычислению y1 и y2
                double v2 = 2 * rnd.NextDouble() - 1; // соответственно в шаге 1 алгоритма
                // Шаг 3.
                s = Math.Pow(v1, 2) + Math.Pow(v2, 2);
                // Шаг 4.
            } while (s >= 1);
            // Шаг 5. Т.к. необходимо только одно число, вычисление x2 не производится
            double x = v1 * Math.Sqrt(-2.0 * Math.Log(s) / s);
            // Шаг 6. Т.к. для белого шума по Гауссу необходимо значение мат.ожидания m = 0, ничего не прибавляется
            return x * sigma;
        }
    }
}
